import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e,o as n}from"./app-DWocaS3E.js";const a={};function l(d,t){return n(),i("div",null,t[0]||(t[0]=[e(`<p>我们来讲一讲C++中最基本的语法构成，这是学好C++的基础。</p><p>首先，我们先来了解语句和表达式。</p><ul><li><strong>表达式（Expression）<strong>是由</strong>变量</strong>、<strong>字面量</strong>、<strong>操作符</strong>以及<strong>函数调用</strong>等组成的代码片段，它计算并产生一个值。例如，<code>a + b</code> 是一个表达式，它会计算两个变量 <code>a</code> 和 <code>b</code> 的和。</li><li><strong>语句（Statement）<strong>是执行特定操作的指令，通常以分号 <code>;</code> 结尾。语句可以包含一个或多个表达式，并且可以执行如</strong>赋值</strong>、<strong>函数调用</strong>、<strong>控制流</strong>（如 <code>if</code>、<code>while</code>）等操作。<br> 例如，以下是一些表达式语句（Expression statements），它们是包含表达式的语句，表达式后面跟着分号：</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Ciallo!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到，第二行包含两个语句，它们可以写在同一行，只要用分号分开就好了。第三行展示了逗号运算符的用法，它允许顺序执行多个表达式，并返回最后一个表达式的值：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;114514&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1919810</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码执行后，会输出<code>114514</code>，并将<code>a</code>的值改为<code>1919810</code>，从这个例子中，我们不难发现，在特定的情况下，单个<strong>值</strong>（如数字，字符串）也可以作为一个语句。</p><p>接着，我们来关注变量。</p><p>c++中，变量都有一个固定的类型，一旦定义，就不能再改变了。</p><p>变量大致有一下几种类型：</p><table><thead><tr><th style="text-align:center;">变量类型</th><th style="text-align:center;">所占字节数</th><th style="text-align:center;">关键字</th></tr></thead><tbody><tr><td style="text-align:center;">整型</td><td style="text-align:center;">2</td><td style="text-align:center;"><code>short</code></td></tr><tr><td style="text-align:center;">整型</td><td style="text-align:center;">4</td><td style="text-align:center;"><code>int</code></td></tr><tr><td style="text-align:center;">整型</td><td style="text-align:center;">8</td><td style="text-align:center;"><code>long long</code></td></tr><tr><td style="text-align:center;">浮点型</td><td style="text-align:center;">4</td><td style="text-align:center;"><code>float</code></td></tr><tr><td style="text-align:center;">浮点型</td><td style="text-align:center;">8</td><td style="text-align:center;"><code>double</code></td></tr><tr><td style="text-align:center;">布尔类型</td><td style="text-align:center;">1</td><td style="text-align:center;"><code>bool</code></td></tr><tr><td style="text-align:center;">结构体类型</td><td style="text-align:center;">-</td><td style="text-align:center;"><code>struct</code></td></tr><tr><td style="text-align:center;">类类型</td><td style="text-align:center;">-</td><td style="text-align:center;"><code>class</code></td></tr><tr><td style="text-align:center;">自动推导</td><td style="text-align:center;">-</td><td style="text-align:center;"><code>auto</code></td></tr></tbody></table><p>注意，以上的所占字节数为64位机器下的常见字节数。</p><p>此外，类型还可以使用修饰符来修饰，常见的修饰符有：</p><ul><li><code>unsigned</code></li><li><code>signed</code></li><li><code>const</code></li><li><code>static</code></li><li><code>extern</code></li></ul><p>其中 <code>unsigned</code> 和 <code>const</code> 最为常见，分别代表无符号和常量。</p><p>下面，举几个例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 114</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 514</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// a = 4; 错误</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">514</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 潜在错误</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>const</code> 修饰的变量必须一开始就设定初始值，并且不能再改变，<code>unsigned</code> 修饰的变量如果存负数会导致 <strong>溢出</strong>。</p>`,18)]))}const p=s(a,[["render",l],["__file","0x01.html.vue"]]),o=JSON.parse('{"path":"/posts/C__/0x01.html","title":"关于C++起步杂谈 0x01","lang":"zh-CN","frontmatter":{"icon":"logos:c-plusplus","date":"2024-10-20T23:41:25.000Z","category":["cpp"],"title":"关于C++起步杂谈 0x01","description":"我们来讲一讲C++中最基本的语法构成，这是学好C++的基础。 首先，我们先来了解语句和表达式。 表达式（Expression）是由变量、字面量、操作符以及函数调用等组成的代码片段，它计算并产生一个值。例如，a + b 是一个表达式，它会计算两个变量 a 和 b 的和。 语句（Statement）是执行特定操作的指令，通常以分号 ; 结尾。语句可以包含一...","head":[["meta",{"property":"og:url","content":"https://chenwenda316.github.io/posts/C__/0x01.html"}],["meta",{"property":"og:site_name","content":"for_each"}],["meta",{"property":"og:title","content":"关于C++起步杂谈 0x01"}],["meta",{"property":"og:description","content":"我们来讲一讲C++中最基本的语法构成，这是学好C++的基础。 首先，我们先来了解语句和表达式。 表达式（Expression）是由变量、字面量、操作符以及函数调用等组成的代码片段，它计算并产生一个值。例如，a + b 是一个表达式，它会计算两个变量 a 和 b 的和。 语句（Statement）是执行特定操作的指令，通常以分号 ; 结尾。语句可以包含一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T12:28:39.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-20T23:41:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T12:28:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于C++起步杂谈 0x01\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-20T23:41:25.000Z\\",\\"dateModified\\":\\"2025-02-19T12:28:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"for-each\\",\\"url\\":\\"https://for-each.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1739968119000,"updatedTime":1739968119000,"contributors":[{"name":"for_each316","username":"for_each316","email":"2014214637@qq.com","commits":1,"url":"https://github.com/for_each316"}]},"readingTime":{"minutes":2,"words":600},"filePathRelative":"posts/C++/0x01.md","localizedDate":"2024年10月20日","excerpt":"<p>我们来讲一讲C++中最基本的语法构成，这是学好C++的基础。</p>\\n<p>首先，我们先来了解语句和表达式。</p>\\n<ul>\\n<li><strong>表达式（Expression）<strong>是由</strong>变量</strong>、<strong>字面量</strong>、<strong>操作符</strong>以及<strong>函数调用</strong>等组成的代码片段，它计算并产生一个值。例如，<code>a + b</code> 是一个表达式，它会计算两个变量 <code>a</code> 和 <code>b</code> 的和。</li>\\n<li><strong>语句（Statement）<strong>是执行特定操作的指令，通常以分号 <code>;</code> 结尾。语句可以包含一个或多个表达式，并且可以执行如</strong>赋值</strong>、<strong>函数调用</strong>、<strong>控制流</strong>（如 <code>if</code>、<code>while</code>）等操作。<br>\\n例如，以下是一些表达式语句（Expression statements），它们是包含表达式的语句，表达式后面跟着分号：</li>\\n</ul>","autoDesc":true}');export{p as comp,o as data};
