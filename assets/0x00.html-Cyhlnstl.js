import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as e}from"./app-DbC96pun.js";const n={};function l(h,i){return e(),t("div",null,i[0]||(i[0]=[a(`<p>C++ 是一种现代的、面向对象的编程语言，以其强大的功能和灵活性而闻名。它的语法相对复杂，学习曲线陡峭。应该如何深入浅出的入门C++呢？</p><p>我们先来一段最简单的C++程序，这是学习任何编程语言的传统第一步：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//程序1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>集成开发环境</strong>(IDE)，中点击<code>编译并运行</code>，然后你的屏幕上应该会以某种形式出现一行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello, world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是我们程序的执行结果。那么，为什么呢？我们不妨逐行来理解。</p><p>第1行，是<strong>预处理指令</strong>，用于<strong>包含头文件</strong><code>iostream</code>（input output stream，输入输出流）。直观上理解，它起到<strong>导入库</strong>的作用，告诉编译器在编译过程中包含<strong>标准输入输出流的实现</strong>，使得我们可以<strong>调用</strong>如 cout 和 endl 这样的功能。深入的理解，这行代码会在<strong>编译</strong>的<strong>预处理</strong>阶段，将<code>iostream</code>头文件里用到的代码进行<strong>展开</strong>，并加入到我们写的代码中。手动预处理指令为<code>g++ -E xxx.cpp -o yyy.cpp</code>。</p><p>第2行，是声明代码，直观上理解，它的作用是将<strong>标准命名空间</strong>（std）中的所有<strong>名称</strong>引入到当前<strong>作用域</strong>（此例中是全局作用域，也就是往下的所有代码），如此以来，就不需要在标准库的类、函数和对象前面加上 std:: 前缀了。深入的理解，<strong>命名空间</strong>的主要作用是防止<strong>命名冲突</strong>，尤其是在大型项目中，不同的库可能会定义<strong>相同名称</strong>的函数、类或变量。注意，在大型项目中，不建议过度用<code>using namespace</code>，可能会导致命名冲突，因此有些开发者和团队会避免在<strong>全局范围内</strong>使用它。</p><p>第3行到第5行，定义了一个特殊的<strong>函数</strong>——<strong>主函数</strong>。写在主函数里面的语句会最先被执行，是程序的入口。值得说明的是，第3行，也可以写作一下两种形式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[], </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">envp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>和程序1中一样，这种写法都是<strong>标准签名</strong>，只不过后者可以接受<strong>命令行参数</strong>或<strong>环境变量</strong>，这在编写需要用户输入或配置的程序时非常有用。具体的用法和使用样例，超出了我们当前的讨论范围，感兴趣的读者可自行研究。</p><p>第4行，使用了<code>cout</code>来输出文本到<strong>控制台</strong>。<code>cout</code> 是 C++ 标准库中的一个<code>ostream</code>对象，用于输出数据。<code>&lt;&lt;</code> 是插入操作符，用于将数据发送到 <code>cout</code>。<code>&quot;Hello, world!&quot;</code> 是要输出的<strong>字符串</strong>。如果不太能理解 <code>&lt;&lt;</code> ，可以这样理解：<code>&lt;&lt;</code>是一个<strong>操作符重载</strong>，它的行为类似于一个<strong>函数</strong>，接受<code>cout</code>和字符串（或其他支持的类型）作为<strong>参数</strong>，然后执行输出操作。<code>endl</code> 是一个操纵符，它的作用是在输出流中插入一个换行符，并刷新输出缓冲区，确保所有待输出的数据都被输出，值得一提的是，刷新缓冲区的操作比较费时，如果进行大量这样带有换行的输出，可能会影响性能。因此，我们可以选择用<strong>转义符号</strong><code>\\n</code>替代<code>endl</code>，例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样可以提高大量输出时的性能.</p><p>第5行，<code>return 0;</code> 是返回一个<code>int</code>类型的值<code>0</code>，在 <code>main</code> 函数中表明程序成功执行并退出。这个整数返回值是一个状态码，其中 0 通常表示成功，而非 0 值则表示出现了错误。这个惯例在很多操作系统中被用来让脚本或其他程序能够判断程序执行是否顺利。</p><p>第7行，是注释。注释是编写代码时添加的说明文本，它们不会被程序执行，但对阅读和理解代码的人来说非常重要。程序1中用的是<strong>单行注释</strong>，在 <code>//</code> 后面的行内文字全是注释。还有多行注释和文档注释，以多行注释为例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*这里也可以写注释。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">这里写注释。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文以简单的样例程序简单的介绍了C++，有些含义不需要都理解，了解即可。<br> 下一篇文章，计划从数据类型开始，系统深入的介绍C++。</p>`,18)]))}const d=s(n,[["render",l],["__file","0x00.html.vue"]]),k=JSON.parse('{"path":"/posts/C__/0x00.html","title":"关于C++起步杂谈 0x00","lang":"zh-CN","frontmatter":{"icon":"logos:c-plusplus","date":"2024-10-18T01:47:40.000Z","category":["cpp"],"title":"关于C++起步杂谈 0x00","description":"C++ 是一种现代的、面向对象的编程语言，以其强大的功能和灵活性而闻名。它的语法相对复杂，学习曲线陡峭。应该如何深入浅出的入门C++呢？ 我们先来一段最简单的C++程序，这是学习任何编程语言的传统第一步： 在集成开发环境(IDE)，中点击编译并运行，然后你的屏幕上应该会以某种形式出现一行 这就是我们程序的执行结果。那么，为什么呢？我们不妨逐行来理解。 ...","head":[["meta",{"property":"og:url","content":"https://chenwenda316.github.io/posts/C__/0x00.html"}],["meta",{"property":"og:site_name","content":"for_each"}],["meta",{"property":"og:title","content":"关于C++起步杂谈 0x00"}],["meta",{"property":"og:description","content":"C++ 是一种现代的、面向对象的编程语言，以其强大的功能和灵活性而闻名。它的语法相对复杂，学习曲线陡峭。应该如何深入浅出的入门C++呢？ 我们先来一段最简单的C++程序，这是学习任何编程语言的传统第一步： 在集成开发环境(IDE)，中点击编译并运行，然后你的屏幕上应该会以某种形式出现一行 这就是我们程序的执行结果。那么，为什么呢？我们不妨逐行来理解。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T12:28:39.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-18T01:47:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T12:28:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于C++起步杂谈 0x00\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-18T01:47:40.000Z\\",\\"dateModified\\":\\"2025-02-19T12:28:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"for-each\\",\\"url\\":\\"https://for-each.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1739968119000,"updatedTime":1739968119000,"contributors":[{"name":"for_each316","username":"for_each316","email":"2014214637@qq.com","commits":1,"url":"https://github.com/for_each316"}]},"readingTime":{"minutes":3.93,"words":1180},"filePathRelative":"posts/C++/0x00.md","localizedDate":"2024年10月18日","excerpt":"<p>C++ 是一种现代的、面向对象的编程语言，以其强大的功能和灵活性而闻名。它的语法相对复杂，学习曲线陡峭。应该如何深入浅出的入门C++呢？</p>\\n<p>我们先来一段最简单的C++程序，这是学习任何编程语言的传统第一步：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" data-title=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> &lt;iostream&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">using</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> std</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    cout </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"Hello, world!\\"</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> &lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> endl;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    return</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//程序1</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
